type Query {
  users: [User!]!
  user(id: Int!): User
  loggedInUser: User
  orders: [Order!]!
  order(id: Int!): Order
}

type Mutation {
  register(
    firstName: String!
    lastName: String!
    userName: String!
    email: String!
    dateOfBirth: String!
    password: String!
    role: Role!
  ): AuthPayload!

  login(email: String!, password: String!): AuthPayload!

  createPayment(
    orderId: Int!
    amount: Float!
    paymentStatus: PaymentStatus!
    transactionId: String
  ): Payment!

  createReview(
    orderId: Int!
    qaId: Int!
    writerId: Int!
    comments: String
    rating: Int!
  ): Review!

  createAssignment(orderId: Int!, writerId: Int!): Assignment!
}

type User {
  id: Int!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  dateOfBirth: String!
  role: Role!
  createdAt: String!
  updatedAt: String!
  orders: [Order!]!
  qaReviews: [Review!]!
  writtenReviews: [Review!]!
  assignments: [Assignment!]!
}

type Order {
  id: Int!
  student: User!
  title: String!
  description: String
  documentPath: String
  instructions: String!
  status: OrderStatus!
  totalAmount: Float!
  depositAmount: Float!
  createdAt: String!
  updatedAt: String!
  payment: Payment
  reviews: [Review!]!
  assignments: [Assignment!]!
}

type Payment {
  id: Int!
  orderId: Int!
  amount: Float!
  paymentStatus: PaymentStatus!
  transactionId: String
  paymentDate: String!

  order: Order!
}

type Review {
  id: Int!
  orderId: Int!
  qa: User!
  writer: User!
  comments: String
  rating: Int!
  createdAt: String!
  updatedAt: String!

  order: Order!
}

type Assignment {
  id: Int!
  orderId: Int!
  writer: User!
  assignedAt: String!
  completedAt: String

  order: Order!
}

type AuthPayload {
  token: String!
  user: User!
}

enum Role {
  ADMIN
  STUDENT
  WRITER
  QA
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REVIEWED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
