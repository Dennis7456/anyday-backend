type Query {
  users: [User!]!
  user(id: String!): User
  loggedInUser: User
  orders: [Order!]!
  order(id: String!): Order
}

type Mutation {
  registerAndCreateOrder(input: RegisterOrderInput!): RegisterOrderResponse!
  verifyEmail(token: String!): VerifyEmailResponse!
  completeRegistration(input: CompleteRegistrationInput!): User!
  register(
    firstName: String!
    lastName: String!
    userName: String!
    email: String!
    dateOfBirth: String!
    phoneNumber: String!
    password: String!
    role: Role!
  ): AuthPayload!
  createStudent(input: CreateStudentInput!): User!

  createOrder(input: CreateOrderInput!): OrderResponse!

  attachFiles(input: AttachFilesInput!): Order!

  login(email: String!, password: String!): AuthPayload!

  createPayment(
    orderId: String!
    amount: Float!
    paymentStatus: PaymentStatus!
    transactionId: String
  ): Payment!

  createReview(
    orderId: String!
    qaId: String!
    writerId: String!
    comments: String
    rating: Int!
  ): Review!

  createAssignment(orderId: String!, writerId: Int!): Assignment!

  updateOrderStatus(orderId: String!, status: String!): Order
  
}

input RegisterOrderInput {
  email: String!
  paperType: String!
  pages: Int!
  dueDate: String!
}

input CompleteRegistrationInput {
  token: String!
  firstName: String!
  lastName: String!
  password: String!
}

input CreateStudentInput {
  firstName: String!
  lastName: String!
  email: String!
  dateOfBirth: String!
  phoneNumber: String!
  password: String!
  }

input CreateOrderInput {
  studentId: String!
  instructions: String!
  paperType: String!
  numberOfPages: Int!
  dueDate: String!
  uploadedFiles: [FileValueInput!]!
  }
input AttachFilesInput {
  orderId: String!
  fileUrls: [String!]!
}

input FileValueInput {
  id: String!
  url: String!
  name: String!
  size: String!
  type: String!
}

type RegisterOrderResponse {
  success: Boolean!
  message: String
  verificationToken: String
}

type VerifyEmailResponse {
  valid: Boolean!
  message: String
  redirectUrl: String!
  token: String!
}

type OrderResponse {
success: Boolean!
message: String
order: Order!
}

type User {
  id: String!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  dateOfBirth: String!
  phoneNumber: String!
  role: Role!
  createdAt: String!
  updatedAt: String!
  orders: [Order!]!
  qaReviews: [Review!]!
  writtenReviews: [Review!]!
  assignments: [Assignment!]!
  password: String!
}

type Order {
  id: String!
  studentId: String!
  student: User!
  instructions: String!
  paperType: String!
  numberOfPages: Int!
  dueDate: String!
  uploadedFiles: [FileValue!]!
  totalAmount: Int!
  depositAmount: Int!
  status: OrderStatus!
}

type Payment {
  id: String!
  orderId: String!
  amount: Float!
  paymentStatus: PaymentStatus!
  transactionId: String
  paymentDate: String!
  order: Order!
}

type Review {
  id: String!
  orderId: String!
  qa: User!
  writer: User!
  comments: String
  rating: Int!
  createdAt: String!
  updatedAt: String!

  order: Order!
}

type Assignment {
  id: String!
  orderId: String!
  writer: User!
  assignedAt: String!
  completedAt: String

  order: Order!
}

type AuthPayload {
  token: String!
  user: User!
}

type FileValue {
id: String!
url: String!
name: String!
size: String!
type: String!
}

enum Role {
  ADMIN
  STUDENT
  WRITER
  QA
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REVIEWED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}