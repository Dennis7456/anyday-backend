scalar DateTime

# Enums
enum Role {
  ADMIN
  STUDENT
  WRITER
  QA
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum NotificationType {
  MESSAGE
  ORDER_UPDATE
  REVIEW
  PAYMENT
}

enum PaperType {
  ESSAY
  RESEARCH_PAPER
  THESIS
  DISSERTATION
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REVIEWED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ReviewStatus {
  PENDING
  VERIFIED
}

# Types
type User {
  id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  phoneNumber: String!
  dateOfBirth: String!
  password: String!
  role: Role!
  isVerified: Boolean!
  profilePicture: String
  createdAt: DateTime!
  updatedAt: DateTime!
  emailNotifications: Boolean!
  inAppNotifications: Boolean!
  orders: [Order]
  notifications: [Notification]
  sentMessages: [Message]
  receivedMessages: [Message]
  qaReviews: [Review]
  writtenReviews: [Review]
  assignments: [Assignment]
  chats: [Chat]
}

type Order {
  id: ID!
  studentId: String!
  instructions: String!
  paperType: PaperType!
  numberOfPages: Int!
  dueDate: DateTime!
  status: OrderStatus!
  totalAmount: Float!
  depositAmount: Float!
  createdAt: DateTime!
  submittedAt: DateTime
  updatedAt: DateTime!

  student: User!
  payment: Payment
  reviews: [Review!]!
  assignments: [Assignment!]!
  uploadedFiles: [File!]!
  chats: [Chat!]!
}

type Review {
  id: ID!
  orderId: String!
  qaId: String!
  writerId: String!
  comments: String
  rating: Int!
  status: ReviewStatus!
  createdAt: DateTime!
  updatedAt: DateTime!

  order: Order!
  qa: User!
  writer: User!
}

type Assignment {
  id: ID!
  orderId: String!
  writerId: String!
  assignedAt: DateTime!
  completedAt: DateTime
  status: AssignmentStatus!

  order: Order!
  writer: User!
}

type Payment {
  id: ID!
  orderId: String!
  amount: Float!
  paymentStatus: PaymentStatus!
  transactionId: String
  paymentDate: DateTime!
  paymentMethod: String
  paymentDueDate: DateTime

  order: Order!
}

type File {
  id: ID!
  url: String!
  name: String!
  size: String!
  mimeType: String
  orderId: String!
  order: Order!
}

type Chat {
  id: ID!
  orderId: String!
  participants: [User!]!
  messages: [Message!]!
  createdAt: DateTime!
  updatedAt: DateTime!

  order: Order!
}

type Message {
  id: ID!
  chatId: String!
  senderId: String!
  recipientId: String
  content: String!
  isRead: Boolean!
  createdAt: DateTime!

  chat: Chat!
  sender: User!
  recipient: User
}

type Notification {
  id: ID!
  recipientId: String!
  type: NotificationType!
  message: String!
  link: String!
  isRead: Boolean!
  createdAt: DateTime!

  recipient: User!
}

# Inputs
input LoginInput {
  email: String!
  password: String!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  phoneNumber: String!
  dateOfBirth: String!
  password: String!
  role: Role!
}

input CreateStudentInput {
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  phoneNumber: String!
  dateOfBirth: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  userName: String
  email: String
  phoneNumber: String
  dateOfBirth: String
  password: String
  profilePicture: String
  emailNotifications: Boolean
  inAppNotifications: Boolean
}

input CreateOrderInput {
  paperType: PaperType!
  instructions: String!
  numberOfPages: Int!
  dueDate: DateTime!
  depositAmount: Float!
  totalAmount: Float!
}

input OrderUpdateInput {
  paperType: PaperType
  instructions: String
  numberOfPages: Int
  dueDate: DateTime
  status: OrderStatus
  totalAmount: Float
  depositAmount: Float
}

input RegisterAndCreateOrderInput {
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  phoneNumber: String!
  dateOfBirth: String!
  password: String!
  paperType: PaperType!
  instructions: String!
  numberOfPages: Int!
  dueDate: DateTime!
  depositAmount: Float!
  totalAmount: Float!
}

input UploadFilesInput {
  orderId: String!
  files: [Upload!]!
}

# Responses
type AuthPayload {
  token: String
  user: User
}

type VerifyEmailResponse {
  success: Boolean!
  message: String!
}

type CompleteRegistrationResponse {
  success: Boolean!
  message: String!
  token: String
  user: User
}

type CreateOrderResponse {
  success: Boolean!
  message: String!
  order: Order
}

type RegisterOrderResponse {
  success: Boolean!
  message: String!
  token: String
  user: User
  order: Order
}

type UploadFilesPayload {
  success: Boolean!
  message: String!
  files: [File!]
}

type Query {
  info: String!
  test: String!
  users: [User!]!
  user(id: ID!): User
  loggedInUser: User!
  getOrders: [Order!]!
  getOrder(id: ID!): Order
  # Assignment Queries
  assignmentsByOrder(orderId: String!): [Assignment!]!
  assignmentsByWriter(writerId: String!): [Assignment!]!
  # Payment Queries
  paymentsByOrder(orderId: String!): [Payment!]!
  paymentByTransactionId(transactionId: String!): Payment
  # File Queries
  filesByOrder(orderId: String!): [File!]!
  # Notification Queries
  notificationsByOrder(orderId: String!): [Notification!]!
  # Chat Queries
  chats: [Chat!]!
  chat(id: ID!): Chat!
  chatsByOrder(orderId: String!): [Chat!]!
  chatsByUser(userId: String!): [Chat!]!
}

# Mutations
type Mutation {
  createUser(input: CreateUserInput!): User!
  login(input: LoginInput): AuthPayload
  createOrder(input: CreateOrderInput!): CreateOrderResponse!
  updateOrder(orderId: ID!, data: OrderUpdateInput!): Order!
  registerAndCreateOrder(
    input: RegisterAndCreateOrderInput!
  ): RegisterOrderResponse!
  verifyEmail(token: String!): VerifyEmailResponse
  completeRegistration(token: String!): CompleteRegistrationResponse!
  createStudent(input: CreateStudentInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): String!
  deleteOrder(id: ID!): Order!
  # File Mutations
  uploadFiles(input: UploadFilesInput!): UploadFilesPayload!
  # Chat Mutations
  createChat(input: CreateChatInput!): CreateChatResponse!
  sendMessage(input: SendMessageInput!): SendMessageResponse!
  markMessageAsRead(messageId: ID!): Message!
}

# Subscriptions
type Subscription {
  messageAdded(chatId: ID!): Message!
  chatAdded(userId: ID!): Chat!
}

# Chat Input Types
input CreateChatInput {
  orderId: String!
  participantIds: [String!]!
}

input SendMessageInput {
  chatId: String!
  content: String!
  recipientId: String
}

# Chat Response Types
type CreateChatResponse {
  success: Boolean!
  message: String!
  chat: Chat
}

type SendMessageResponse {
  success: Boolean!
  message: String!
  messageData: Message
}
